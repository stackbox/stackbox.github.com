<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[叠搭宝箱]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://stackbox.org/"/>
  <updated>2015-05-11T14:51:32.182Z</updated>
  <id>http://stackbox.org/</id>
  
  <author>
    <name><![CDATA[SRK.Lyu]]></name>
    <email><![CDATA[saber@stackbox.org]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[maven大坑]]></title>
    <link href="http://stackbox.org/2015/05/dammit-maven/"/>
    <id>http://stackbox.org/2015/05/dammit-maven/</id>
    <published>2015-05-10T16:53:31.000Z</published>
    <updated>2015-05-11T14:50:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="乱码">乱码</h2>
<p>再部署某产品的时候, 出现了诡异的编码错误,主要体现为:</p>
<ul>
<li>登陆提交的表单会自动加一串奇奇怪怪的乱码</li>
<li>Constant变量中的中文在当成message放在json中也会出现乱码</li>
</ul>
<p>一开始我以为是Linux的Locale环境变量引起的,但是改之依然没有效果,而从上面的那个第二条大致可以<br>猜出是文件编译的时候把encoding搞乱了。因为@FanFan童鞋用直接eclipse的export导出的war是可用的,那就是说打包的时候错误了。</p>
<p>最后的解决方法是: <strong> pom.xml配置编码方式 </strong></p>
<p>先配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">project.build.sourceEncoding</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="title">properties</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后再配置 maven-compiler-plugin</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">source</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">target</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">encoding</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="mybatis代理失效">mybatis代理失效</h2>
<p>这个问题找的比较快,因为mybatis是通过动态代理模式来实现DAO接口的, 一看到CGLib失败就知道接口的代理出现了问题。<br>果不其然，在编译的结果里没有找到mybatis的xml。</p>
<p>好吧，项目的先人把XML放到了 <code>src/main/java</code> 下, 而默认会忽略掉这个文件夹下的配置文件的。而且先人还是通过eclipse-&gt;export导出war包的，所以就没有发现这个问题。</p>
<p>解决方法:</p>
<ul>
<li>比较暴力的方法是把xml,properties 都放到<code>src/main/resources</code>下</li>
<li>本着较少改动的原则,给pom.xml添加如下配置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="title">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="title">filtering</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">resource</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="title">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="title">filtering</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">resource</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="其他">其他</h2>
<p>配xml不能随便，不能随便</p>
]]></content>
    
    
      <category term="软件工程" scheme="http://stackbox.org/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[002-Express.js教程-常用软件]]></title>
    <link href="http://stackbox.org/2015/04/express-tutorial-2/"/>
    <id>http://stackbox.org/2015/04/express-tutorial-2/</id>
    <published>2015-04-25T03:34:15.000Z</published>
    <updated>2015-05-03T13:05:16.000Z</updated>
    <content type="html"><![CDATA[<p><link href="http://vjs.zencdn.net/4.12/video-js.css" rel="stylesheet"></p>
<p><script src="http://vjs.zencdn.net/4.12/video.js"></script><br>Express.js系列教程 第二讲</p>
<ul>
<li>我也不知道我在说什么系列～～～德云社师傅快收了我</li>
</ul>
<video class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" width="770" height="542" data-setup="{}"><br>      <source src="http://srkbox-images.qiniudn.com/node-tutorialexpress-tutorial-2.1.mp4" type="video/mp4"><br></video>
]]></content>
    
    
      <category term="Node.js" scheme="http://stackbox.org/tags/Node-js/"/>
    
      <category term="Express.js" scheme="http://stackbox.org/tags/Express-js/"/>
    
      <category term="视频教程" scheme="http://stackbox.org/categories/%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[001-Express.js教程-基础部分]]></title>
    <link href="http://stackbox.org/2015/04/express-tutorial-1/"/>
    <id>http://stackbox.org/2015/04/express-tutorial-1/</id>
    <published>2015-04-24T03:34:14.000Z</published>
    <updated>2015-04-26T10:06:51.000Z</updated>
    <content type="html"><![CDATA[<p><link href="http://vjs.zencdn.net/4.12/video-js.css" rel="stylesheet"></p>
<p><script src="http://vjs.zencdn.net/4.12/video.js"></script><br>Express.js系列教程 第一讲</p>
<ul>
<li>编译安装<br>NOTE: win平台下直接使用二进制包即可</li>
</ul>
<video class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" width="770" height="542" data-setup="{}"><br>      <source src="http://srkbox-images.qiniudn.com/node-tutorialinstall-node.mp4" type="video/mp4"><br></video>

<ul>
<li>Express初体验<br>NOTE: 这一弹口吃不清了。。</li>
</ul>
<video class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" width="770" height="542" data-setup="{}"><br>      <source src="http://srkbox-images.qiniudn.com/node-tutorialnode-tutorial-1.2.mp4" type="video/mp4"><br></video>
]]></content>
    
    
      <category term="Node.js" scheme="http://stackbox.org/tags/Node-js/"/>
    
      <category term="Express.js" scheme="http://stackbox.org/tags/Express-js/"/>
    
      <category term="视频教程" scheme="http://stackbox.org/categories/%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[某可视化产品交流心得]]></title>
    <link href="http://stackbox.org/2015/03/marketing-thinking/"/>
    <id>http://stackbox.org/2015/03/marketing-thinking/</id>
    <published>2015-03-24T11:44:25.000Z</published>
    <updated>2015-04-19T18:09:07.000Z</updated>
    <content type="html"><![CDATA[<p>这次的产品交流主要是和市场人员进行讨论,收获了一些很好的观点</p>
<p>核心思路: 这个功能能给用户带来什么？ 具体的需求细节如下</p>
<ul>
<li>每个地域的曝光不用太过明细，到省份即可，而出了具体点曝光量外，媒体更想知道的是<big>每个地域还剩多少库存</big>，这是一个挖掘点</li>
<li>曝光量等信息是媒体的核心运营信息，这点最好不要透露，用相对量的优点是能完成数据洗白，顺便可以建立一个XX榜,这点对媒体来说很有吸引力</li>
<li>目前来讲，分屏比分地域重要的多, 而且关键点还是如何完好 “库存与优化” 这个概念</li>
<li>UI上不要太混乱，目前项目的这种设计看起来每个报表时平等的，功能全面，但是会给人一种混乱感，并且无法抓住重点，略像鸡肋</li>
<li>数据可视化的实质是：如何用现有数据进行处理，挖掘，建立某种有效的模型，以维度一二三来进行有效的思考和决策。</li>
<li>客户自己会有一个象限（人群，内容，客户结构），然后产品也会有一个象限，两个象限越相近越好</li>
<li>没有kpi也要为客户设立kpi (竞争kpi，运营kpi等等)，这一点具体操作还没有太明白</li>
<li>对于媒体来讲，比较重要的信息是UserInfo,运营数据,经营数据,自己和行业的数据等等,目前产品对这些点的挖掘还是太过肤浅了</li>
</ul>
<p>之后有时间的话大概会画一个原型出来 ～～😁</p>
]]></content>
    
    
      <category term="产品" scheme="http://stackbox.org/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chord算法]]></title>
    <link href="http://stackbox.org/2015/02/chord-algorithm/"/>
    <id>http://stackbox.org/2015/02/chord-algorithm/</id>
    <published>2015-02-09T16:53:31.000Z</published>
    <updated>2015-04-18T17:09:04.000Z</updated>
    <content type="html"><![CDATA[<p>在分布式计算中,如何快速查找存储有某段数据的节点是最核心的问题之一,Chord算法就是解决此类问题的方法之一</p>
<p><a id="more"></a></p>
<h2 id="基本概念">基本概念</h2>
<h3 id="覆盖网络(overlaynetwork)">覆盖网络(overlaynetwork)</h3>
<p>覆盖网络是这么一种网络:构建在其他网络之上、网络节点之间通过虚拟或逻辑连接在一起，比如云计算、分布式系统都是覆盖网络，因为其都构建于TCP/IP之上，且节点之间有联系。</p>
<h3 id="结构化网络">结构化网络</h3>
<p>传统的非结构化网络,节点与节点之间不存在组织关系,其查找算法一般有如下几种:</p>
<ol>
<li>Napster: 使用一个中心服务器处理所有的查询请求,中心服务器挂掉整个服务就挂掉了<br><img src="/image/chord/napster.png" alt=""></li>
<li>Gnutella: 使用消息洪泛定位数据,查询消息发送到每个节点,一般会使用TTL来限制消息的转发次数,但是当网络规模<br>较大时网络负载会变大.<br><img src="/image/chord/gnutella.png" alt=""></li>
<li>SN型: 即超级节点,和Napster时分类似,不过在整个网络中有多个中心节点,索引消息会在这些SN中进行传播,不过依然可能系统崩溃</li>
</ol>
<h3 id="DHT">DHT</h3>
<h2 id="算法概述">算法概述</h2>
<h3 id="Chord环构造">Chord环构造</h3>
<ol>
<li>假设存在一个最大容量为 $x_mu$  的环形网络,我们假设以K代表资源,N代表节点,ID表示抽象环形网络中的标识符<br><img src="/image/chord/chord1.png" alt=""></li>
<li><strong>ID(Node) = hash(IP,Port)</strong>, 将Node散列在Chord环中,一般选用 hash-1算法<br><img src="/image/chord/chord2.png" alt=""> </li>
<li>之后开始对资源节点进行散列 <strong>ID(Key) = hash(Key)</strong>,对于K1来说, ID(1)不仅是个标识符,而且有节点存在,所以K1就放在了ID(1)上<br><img src="/image/chord/chord4.png" alt=""></li>
<li>对于K2来说,K2只是一个标识符,不存在节点,ID(2)的继承节点是ID(3),所以K2放在了ID(3)上<br><img src="/image/chord/chord6.png" alt=""></li>
<li>同理,K6本应该在节点ID(6)上,但是ID(6)不存在节点且其继承节点是ID(0),所以K6放在了ID(0)上<br><img src="/image/chord/chord7.png" alt=""></li>
</ol>
<h3 id="Finger路由表">Finger路由表</h3>
<h3 id="节点查找">节点查找</h3>
<ol>
<li>近似二分查找</li>
<li>直到找到资源为止</li>
</ol>
<h3 id="节点加入">节点加入</h3>
<ol>
<li>加入某节点N(n)后,构造Finger路由表</li>
<li>如果存在K(n),则将K(n)从其他节点转移到N(n)</li>
<li>其他节点的Finger路由表中,如某节点的Successor为N(n)的Successor,则重新指向为N(n)</li>
</ol>
<h3 id="节点退出">节点退出</h3>
<ol>
<li>某节点N(n)退出时, 先将它所有的资源都转移到该节点的Successor中</li>
<li>删除节点</li>
<li>其他节点的Finger路由表中,若某节点的Successor为N(n),则重新指向为N(n)的Successor</li>
</ol>
<h3 id="节点失效">节点失效</h3>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="http://www.yeolar.com/note/2010/04/06/p2p-chord/" target="_blank" rel="external">结构化P2P网络chord算法研究与分析</a></li>
<li><a href="http://www.cs.berkeley.edu/~kubitron/courses/cs294-4-F03/slides/lec03-chord.ppt" target="_blank" rel="external">Chord slide of berkeley</a></li>
<li><a href="http://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf" target="_blank" rel="external">Chord sigcomm</a></li>
<li><a href="http://blog.csdn.net/chen77716/article/details/6059575" target="_blank" rel="external">Chord算法（原理）</a></li>
<li><a href="http://blog.csdn.net/wangxiaoqin00007/article/details/7374833" target="_blank" rel="external">Chord算法详解</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>在分布式计算中,如何快速查找存储有某段数据的节点是最核心的问题之一,Chord算法就是解决此类问题的方法之一</p>
<p>]]></summary>
    
      <category term="算法" scheme="http://stackbox.org/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分布式" scheme="http://stackbox.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build Your Own Cas Service - Pro]]></title>
    <link href="http://stackbox.org/2015/01/build-your-own-cas-service-pro/"/>
    <id>http://stackbox.org/2015/01/build-your-own-cas-service-pro/</id>
    <published>2015-01-06T05:21:17.000Z</published>
    <updated>2015-04-18T17:04:11.000Z</updated>
    <content type="html"><![CDATA[<p>示例代码: <a href="https://github.com/superalsrk/modify-jasig-cas" target="_blank" rel="external">https://github.com/superalsrk/modify-jasig-cas</a> ,以下所有描述都基于版本 <a href="http://mvnrepository.com/artifact/org.jasig.cas/cas-server-core/3.5.2.1" target="_blank" rel="external">3.5.2.1</a></p>
<a id="more"></a>

<h2 id="Generally_Design">Generally Design</h2>
<p>我们可以把一个war项目作为dependency，然后创建一个web项目webapp，然后只要将创建项目的 web.xml 和 index.jsp 去掉, 整个项目就能跑了。</p>
<p>更重要的是，如果要对war进行扩展, 只要讲war对应的文件拷贝一份到webapp，打包的时候便能自动到替换。下面讲的 <strong>修改XXX文件</strong>, 都是对其拷贝进行修改,特此声明:</p>
<p>webapp module的pom为<a href="https://github.com/superalsrk/modify-jasig-cas/blob/master/webapp/pom.xml" target="_blank" rel="external">pom.xml</a></p>
<h2 id="Auth_Module">Auth Module</h2>
<h3 id="自定义Credentials">自定义Credentials</h3>
<p>Credentials是一个用户凭证, 可以理解为一个简易的pojo, 只要实现Credentials接口即可，我们的自定义凭证中除了用户名密码，还加了一个字段 product : String, 表明要登录的产品类型</p>
<p>在Web Module中，需要进行如下修改</p>
<p>1 . 在登录表单增加product字段,具体操作详见下个Section<br>2 . 在 /WEB-INF/login-webflow.xml 中,修改credentials类型为自定义的Credentials</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">var</span> name=<span class="string">"credentials"</span> <span class="keyword">class</span>=<span class="string">"com.nbrc.sso.cas.principal.NbrcCredentials"</span>/&gt;</div></pre></td></tr></table></figure>

<p>3 . 然后继续在 login-webflow.xml里找到 viewLoginForm ,进行数据绑定</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">view-state</span> <span class="attribute">id</span>=<span class="value">"viewLoginForm"</span> <span class="attribute">view</span>=<span class="value">"casLoginView"</span> <span class="attribute">model</span>=<span class="value">"credentials"</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="title">binder</span>&gt;</span>  </div><div class="line">           <span class="tag">&lt;<span class="title">binding</span> <span class="attribute">property</span>=<span class="value">"username"</span> /&gt;</span>  </div><div class="line">           <span class="tag">&lt;<span class="title">binding</span> <span class="attribute">property</span>=<span class="value">"password"</span> /&gt;</span>  </div><div class="line">           <span class="tag">&lt;<span class="title">binding</span> <span class="attribute">property</span>=<span class="value">"product"</span>/&gt;</span> <span class="comment">&lt;!--增加这一行 --&gt;</span>  </div><div class="line">       <span class="tag">&lt;/<span class="title">binder</span>&gt;</span>  </div><div class="line">       ...  </div><div class="line"><span class="tag">&lt;/<span class="title">view-state</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="自定义Handler">自定义Handler</h3>
<p>自定义Handler只要实现接口 AuthenticationHandler 即可</p>
<p>1 . 如果要在前台显示一个 权限不足 的信息, 只需在Handler里throw一个自定义的 AuthenticationException 即可<br>2 . support 接口用来声明handler是否支持某种类型的凭证<br>3 . 修改 /WEB-INF/deployConfigContext.xml ，进行handler的配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;property name=<span class="string">"authenticationHandlers"</span>&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;bean</div><div class="line">                    class=<span class="string">"org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"</span> </div><div class="line">                    p:httpClient-<span class="keyword">ref</span>=<span class="string">"httpClient"</span> p:requireSecure=<span class="string">"false"</span> /&gt;</div><div class="line"></div><div class="line">                &lt;bean</div><div class="line">                    class=<span class="string">"com.miaozhen.dashboard.darkportal.mechanism.DarkportalAuthenticationHandler"</span> /&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>

<h3 id="自定义Resolver">自定义Resolver</h3>
<p>Resolver是一个Credentials 到 Principal的转换器， 其中Principal其实是javaEE中就已经定义好的</p>
<p>1 . 修改 /WEB-INF/deployConfigContext.xml ，进行Resolver的配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"credentialsToPrincipalResolvers"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">bean</span></span></div><div class="line">                    <span class="attribute">class</span>=<span class="value">"com.miaozhen.dashboard.darkportal.mechanism.DarkportalCredentialsToPrincipalResolver"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="title">bean</span></span></div><div class="line">                    <span class="attribute">class</span>=<span class="value">"org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div></pre></td></tr></table></figure>

<p>2 . resolver可以返回一个Principal, 个人觉得比较好用的方式是返回一个 #SimplePrincipal# ,除了用户的user信息外，还可以返回一个 AttrMap，不过需要参考下章进行Resolver视图的修改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">map.put(ATTR_USERNAME, mzCredentials.getUsername());</div><div class="line">map.put(ATTR_PASSWORD, mzCredentials.getPassword());</div><div class="line"></div><div class="line">SimplePrincipal simple = <span class="keyword">new</span> SimplePrincipal(mzCredentials.getUsername(), map);</div></pre></td></tr></table></figure>

<h2 id="Web_Module">Web Module</h2>
<h3 id="自定义登陆页面">自定义登陆页面</h3>
<p>正常的做法应该是copy一份defaults文件夹，然后在resources里copy对应的主题配置文件，最后在cas.properties里配置一下主题，不过为了省事直接改defaults里的文件就可以了</p>
<p>default/ui/casLoginView.jsp 就是默认的登录界面，可以给form表单增加多余的字段。需要注意的是：form表单里还有一堆cas自带的input，这个在改页面的时候不能删掉。<br><br></p>
<h3 id="自定义返回用户信息">自定义返回用户信息</h3>
<p>1 . 在resolver中虽然返回了更多Attr，不过默认的Resolver视图不支持返回更多属性，需要对 protocol/2.0/casServiceValidationSuccess.jsp 页面进行扩展.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;%@ page session=<span class="string">"false"</span>%&gt;</span></div><div class="line"><span class="vbscript">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span></div><div class="line"><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> prefix=<span class="string">"fn"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">cas:serviceResponse</span> <span class="attribute">xmlns:cas</span>=<span class="value">'http://www.yale.edu/tp/cas'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">cas:authenticationSuccess</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">cas:user</span>&gt;</span>${fn:escapeXml(assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.id)}<span class="tag">&lt;/<span class="title">cas:user</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">c:if</span></span></div><div class="line">            <span class="attribute">test</span>=<span class="value">"${fn:length(assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.attributes) &gt; 0}"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="title">cas:attributes</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"attr"</span> <span class="attribute">items</span>=<span class="value">"${assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.attributes}"</span>&gt;</span> </div><div class="line">                    <span class="tag">&lt;<span class="title">cas:${fn:escapeXml(attr.key)}</span>&gt;</span>${fn:escapeXml(attr.value)}<span class="tag">&lt;/<span class="title">cas:${fn:escapeXml(attr.key)}</span>&gt;</span> </div><div class="line">                <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span> </div><div class="line">            <span class="tag">&lt;/<span class="title">cas:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${not empty pgtIou}"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">cas:proxyGrantingTicket</span>&gt;</span>${pgtIou}<span class="tag">&lt;/<span class="title">cas:proxyGrantingTicket</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${fn:length(assertion.chainedAuthentications) &gt; 1}"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">cas:proxies</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"proxy"</span> <span class="attribute">items</span>=<span class="value">"${assertion.chainedAuthentications}"</span> </span></div><div class="line">                    <span class="attribute">varStatus</span>=<span class="value">"loopStatus"</span> <span class="attribute">begin</span>=<span class="value">"0"</span> </div><div class="line">                    <span class="attribute">end</span>=<span class="value">"${fn:length(assertion.chainedAuthentications)-2}"</span> <span class="attribute">step</span>=<span class="value">"1"</span>&gt;</div><div class="line">                    <span class="tag">&lt;<span class="title">cas:proxy</span>&gt;</span>${fn:escapeXml(proxy.principal.id)}<span class="tag">&lt;/<span class="title">cas:proxy</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">cas:proxies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">cas:authenticationSuccess</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">cas:serviceResponse</span>&gt;</span></div></pre></td></tr></table></figure>

<p>2 . 在client端，使用如下代码就可以获取多余属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">AttributePrincipal attribute </span>=<span class="string"> (AttributePrincipal) request.getUserPrincipal();</span></div><div class="line">AttributePrincipal.getName()  就是 Resolver中返回的SimplePrincipal名字</div><div class="line">AttributePrincipal.getAttributes() 就是Resolver中返回的SinmplePrincipal的attributes</div></pre></td></tr></table></figure>

<p>3 . 注意把deployerConfigContext.xml中 serviceRegistryDao全部删掉(cas),<a href="http://www.open-open.com/lib/view/open1329744257937.html" target="_blank" rel="external">参考资料</a></p>
<p><br></p>
<h3 id="CAS退出功能">CAS退出功能</h3>
<p>默认的JASIG退出成功后会跳到一个 推出成功页面, 但我们想要的效果是退出CAS，并且退出已经登录的应用, 那么可以进行如下的配置：</p>
<ol>
<li>如果只是退出应用，那么在此访问页面的时候，cas-client又会向cas-server端进行请求验证,然后自动登录,所以同时退出cas和应用即可</li>
<li>修改 cas-servlet.xml , 在 logoutController 的bean中增加属性 p:followServiceRedirects=”true”</li>
<li>假如应用已经有一个退出controller，此contoller用来清空session,那么链接 <a href="http://cas.example.org/logout?service=http://localhost:8080/logout" target="_blank" rel="external">http://cas.example.org/logout?service=http://localhost:8080/logout</a> 便可以正常退出</li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>示例代码: <a href="https://github.com/superalsrk/modify-jasig-cas" target="_blank" rel="external">https://github.com/superalsrk/modify-jasig-cas</a> ,以下所有描述都基于版本 <a href="http://mvnrepository.com/artifact/org.jasig.cas/cas-server-core/3.5.2.1" target="_blank" rel="external">3.5.2.1</a></p>
]]></summary>
    
      <category term="工具" scheme="http://stackbox.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build Your Own Cas Service - Basic]]></title>
    <link href="http://stackbox.org/2015/01/build-your-own-cas-service-basic/"/>
    <id>http://stackbox.org/2015/01/build-your-own-cas-service-basic/</id>
    <published>2015-01-06T05:21:16.000Z</published>
    <updated>2015-04-18T17:04:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="预备知识">预备知识</h2>
<p>具体的CAS协议见, <a href="http://stackbox.org/2014/11/SSO-learning/" target="_blank" rel="external">CAS Protocal</a>,接下来我们讲jasig的CAS Implementation的几个重要的点，以下所有描述都基于版本 <a href="http://mvnrepository.com/artifact/org.jasig.cas/cas-server-core/3.5.2.1" target="_blank" rel="external">3.5.2.1</a><br><a id="more"></a></p>
<p>JASIG有以下几个比较重要的接口</p>
<ul>
<li><p><a href="https://github.com/Jasig/cas/blob/v3.5.2.1/cas-server-core/src/main/java/org/jasig/cas/authentication/principal/Credentials.java" target="_blank" rel="external">Credentials</a> 用户认证凭证, CAS的默认凭证只有用户名密码，所以如果想在认证的时候除了用户名密码外还要验证产品信息，就要自定义一个Credentials了，下面的Handler和Resolver都有一个support接口，用来判断是否支持处理某种类型的Credentials</p>
</li>
<li><p><a href="https://github.com/Jasig/cas/blob/v3.5.2.1/cas-server-core/src/main/java/org/jasig/cas/authentication/handler/AuthenticationHandler.java" target="_blank" rel="external">AuthenticationHandler</a> 前台页面提交登录信息后，此接口判断登录信息是否能认证通过,接口会抛出一个AuthenticationException异常，用以在上层代码中catch并在前台页面显示错误信息</p>
</li>
<li><p><a href="https://github.com/Jasig/cas/blob/v3.5.2.1/cas-server-core/src/main/java/org/jasig/cas/authentication/principal/CredentialsToPrincipalResolver.java" target="_blank" rel="external">CredentialsToPrincipalResolver</a> CAS-Client端与CAS-Server交互时返回结果,默认只有一个username，如果想附带其他属性，可以自己实现一个Resolver，此外，jasig提供了一些与LDAP等系统集成的Resolver，功能也十分强大</p>
</li>
<li><p><a href="https://github.com/Jasig/cas/blob/v3.5.2.1/cas-server-core/src/main/java/org/jasig/cas/authentication/handler/AuthenticationException.java" target="_blank" rel="external">AuthenticationException</a> 在authentication阶段可能会抛出异常，抛出的异常信息可以前台页面中进行展示</p>
</li>
</ul>
<h2 id="CAS部署与配置">CAS部署与配置</h2>
<p>对于版本 3.5.x, 部署的war包为 module文件夹下的 <strong>cas-server-webapp-3.5.2.1.war</strong></p>
<h3 id="无https配置">无https配置</h3>
<ul>
<li>修改 /WEB-INF/deployerConfigContext.xml， 设置安全属性</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;bean class=<span class="string">"org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"</span></div><div class="line">  p:httpClient-<span class="keyword">ref</span>=<span class="string">"httpClient"</span>  p:requireSecure=<span class="string">"false"</span>/&gt;</div></pre></td></tr></table></figure>

<ul>
<li>修改 /WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="variable">id=</span><span class="string">"ticketGrantingTicketCookieGenerator"</span> </div><div class="line">    <span class="variable">class=</span><span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span> </div><div class="line">    p:<span class="variable">cookieSecure=</span><span class="string">"false"</span> </div><div class="line">    p:<span class="variable">cookieMaxAge=</span><span class="string">"-1"</span>  </div><div class="line">    p:<span class="variable">cookieName=</span><span class="string">"CASTGC"</span> </div><div class="line">    p:<span class="variable">cookiePath=</span><span class="string">"/cas"</span> /&gt;</div><div class="line"> &lt;/beans&gt;</div></pre></td></tr></table></figure>

<ul>
<li>修改 \WEB-INF\spring-configuration\warnCookieGenerator.xm</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="variable">id=</span><span class="string">"warnCookieGenerator"</span> </div><div class="line">    <span class="variable">class=</span><span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span>   </div><div class="line">    p:<span class="variable">cookieSecure=</span><span class="string">"true"</span>  </div><div class="line">    p:<span class="variable">cookieMaxAge=</span><span class="string">"-1"</span>  </div><div class="line">    p:<span class="variable">cookieName=</span><span class="string">"CASPRIVACY"</span>   </div><div class="line">    p:<span class="variable">cookiePath=</span><span class="string">"/cas"</span> /&gt;</div></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>参数p:cookieSecure=”true”，TRUE为采用HTTPS验证，与deployerConfigContext.xml的参数保持一致。 </li>
<li>参数p:cookieMaxAge=”-1”，简单说是COOKIE的最大生命周期，-1为无生命周期，即只在当前打开的IE窗口有效，IE关闭或重新打开其它窗口，仍会要求验证。可以根据需要修改为大于0的数字，比如3600等，意思是在3600秒内，打开任意IE窗口，都不需要验证。</li>
</ol>
</blockquote>
]]></content>
    <summary type="html"><![CDATA[<h2 id="预备知识">预备知识</h2>
<p>具体的CAS协议见, <a href="http://stackbox.org/2014/11/SSO-learning/" target="_blank" rel="external">CAS Protocal</a>,接下来我们讲jasig的CAS Implementation的几个重要的点，以下所有描述都基于版本 <a href="http://mvnrepository.com/artifact/org.jasig.cas/cas-server-core/3.5.2.1" target="_blank" rel="external">3.5.2.1</a><br>]]></summary>
    
      <category term="工具" scheme="http://stackbox.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个javascript库的构建]]></title>
    <link href="http://stackbox.org/2014/12/javascript-lib-architecture/"/>
    <id>http://stackbox.org/2014/12/javascript-lib-architecture/</id>
    <published>2014-12-17T12:38:24.000Z</published>
    <updated>2015-04-19T19:22:18.000Z</updated>
    <content type="html"><![CDATA[<p>编写js/jQuery插件有一些约定俗成的套路，根据这些套路依葫芦画瓢，代码的结构上就不会出现太大的问题了，特别推荐这个叫 <a href="https://github.com/shichuan/javascript-patterns/" target="_blank" rel="external">javascript-patterns</a> 的项目,一些demo让我收获良多。</p>
<h2 id="基本结构">基本结构</h2>
<h3 id="普通的库">普通的库</h3>
<p>用最基本的匿名函数实现即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">	<span class="keyword">var</span> root = <span class="keyword">this</span>;</div><div class="line">	root.YOURLIB = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">		FUNC1 : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{},</div><div class="line">		FUNC2 : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}</div><div class="line">	}</div><div class="line">}())</div></pre></td></tr></table></figure>

<p>也可以使用<code>call</code>而不是使用闭包，此时两种写法等效，<strong>undersocre.js</strong>用的是call写法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">	<span class="keyword">var</span> root = <span class="keyword">this</span>;</div><div class="line">	root.YOURLIB = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">		FUNC1 : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{},</div><div class="line">		FUNC2 : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}</div><div class="line">	}</div><div class="line">}.call(<span class="keyword">this</span>))</div></pre></td></tr></table></figure>

<h3 id="jQuery_插件">jQuery 插件</h3>
<p>通过一下方法可以使的插件可以 跨CMD/AMD/Browser</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">(factory)</span> </span>{</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd) {</div><div class="line">		<span class="comment">// AMD</span></div><div class="line">		define([<span class="string">'jquery'</span>], factory);</div><div class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) {</div><div class="line">		<span class="comment">// CommonJS</span></div><div class="line">		factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>));</div><div class="line">	} <span class="keyword">else</span> {</div><div class="line">		<span class="comment">// Browser globals</span></div><div class="line">		factory(jQuery);</div><div class="line">	}</div><div class="line">}(<span class="function"><span class="keyword">function</span> <span class="params">($)</span> </span>{</div><div class="line"></div><div class="line">	$.fn.render = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">	$.render2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">}))</div></pre></td></tr></table></figure>

<p>当然,如果不考虑Seajs,RequireJS的话,最方便的还是使用匿名函数，然后把window.jQuery当成参数传进去</p>
<h2 id="内部组织">内部组织</h2>
<p>我们以 <a href="https://github.com/silviomoreto/bootstrap-select/blob/master/js/bootstrap-select.js" target="_blank" rel="external">bootstrap-select v1.6.3</a>,<a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="external">smooth-scroll</a>这俩项目来进行分析，</p>
<h3 id="初始化">初始化</h3>
<p>一般的Library都会提供一套defaults配置文件，然后使用的时候和用户自定义的settings进行extend, <strong>smooth-scroll</strong>中的那种</p>
<p><code>settings = extend(defaults, options ||{}));</code> 写法就相当赞，<em>可以以一种十分简单的方式防止空指针异常</em>。</p>
<p>剩下的就是根据业务划分业务的funciton了，对于如何划分，只有多加练习了。</p>
<p>另外，在注释里像写上 <strong>private</strong> 和 <strong>public</strong> 来区分对外接口和对内接口是个不错的习惯。</p>
<h3 id="i18n与配置管理">i18n与配置管理</h3>
<p>i18n是吧那些国际话的字符全都放到defautls，比较优雅的做法是defaults定义一个对象，这样国际化文件<br>便能和原有的库文件进行分离，具体参考 <a href="">bootstrap-datapicker</a></p>
]]></content>
    
    
      <category term="前端" scheme="http://stackbox.org/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Nexus和Shell进行自动化部署]]></title>
    <link href="http://stackbox.org/2014/12/auto-deployment-with-nexus/"/>
    <id>http://stackbox.org/2014/12/auto-deployment-with-nexus/</id>
    <published>2014-12-01T08:50:54.000Z</published>
    <updated>2015-04-18T17:04:00.000Z</updated>
    <content type="html"><![CDATA[<p>项目部署工作是一个很无聊，很费时，但又十分重要的工作，记得在飞饭的时候，由于项目并没有采用maven构建，以及项目包含了<br>大量的图片，部署工作很是麻烦，当是只是在测试的时候采用 ｀git hook` 的方式半自动化运维。</p>
<p>实际在运维的时候，稍微麻烦的项目可以采用jenkins，bamboo，puppet，不过由于目前dashboard还算一个很小的项目，<br>就采用了shell＋nexus仓库的方式进行部署。</p>
<a id="more"></a>

<p>思路如下：</p>
<ol>
<li><code>mvn deploy</code> 发布war包到nexus</li>
<li>调用nexus的接口获取某个版本的war包</li>
<li>scp上传至服务器，并远程调用shell进行清理，解压缩，重启tomcat等操作</li>
</ol>
<p>注意点如下:</p>
<ol>
<li>使用spring profile来区分development和production环境</li>
<li>远程启动tomcat的时候,需要export tomcat启动所需的环境变量</li>
</ol>
<p><strong>auto_dploy.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line">CURRENT_DIR=`<span class="built_in">pwd</span>`</div><div class="line"></div><div class="line">function <span class="function"><span class="title">init_localrepo</span></span>() {</div><div class="line">     rm -rf /tmp/dashboard;</div><div class="line">     mkdir /tmp/dashboard;</div><div class="line">     <span class="built_in">cd</span> /tmp/dashboard;</div><div class="line">     $(wget <span class="string">"http://192.168.10.61:9091/nexus/service/local/artifact/maven/content?g=com.miaozhen&a=dashboard&v=LATEST&r=snapshots&p=war&v=0.0.1-SNAPSHOT"</span> -O target.war)</div><div class="line">     scp target.war demo@example.com:/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo/webapps/ROOT</div><div class="line">}</div><div class="line"></div><div class="line">init_localrepo;</div><div class="line"><span class="built_in">cd</span> <span class="variable">$CURRENT_DIR</span></div><div class="line">ssh supertool@<span class="number">56</span>.mzhen.cn <span class="string">"bash -s"</span> &lt;  server_deploy.sh</div></pre></td></tr></table></figure>

<p><strong>server_deploy.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line">DEPLOY_DIR=/home/YOURFOLDER/apache-tomcat-<span class="number">7</span>-demo/webapps/ROOT</div><div class="line">TOMCAT_DIR=/home/YOURFOLDER/apache-tomcat-<span class="number">7</span>-demo/bin</div><div class="line"></div><div class="line"><span class="built_in">cd</span> <span class="variable">$DEPLOY_DIR</span>;</div><div class="line"></div><div class="line">rm -rf assets</div><div class="line">rm -rf META-INF</div><div class="line">rm -rf WEB-INF</div><div class="line">rm index.jsp</div><div class="line"></div><div class="line">unzip target.war</div><div class="line">rm target.war</div><div class="line"></div><div class="line"><span class="comment">#强制kill掉tomcat进程</span></div><div class="line">ps ax|grep tomcat-<span class="number">7</span>-demo | awk <span class="string">'{print $1}'</span> |xargs kill -<span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">cd</span> <span class="variable">$TOMCAT_DIR</span> ;</div><div class="line"></div><div class="line"><span class="keyword">export</span> CATALINA_BASE=/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo</div><div class="line"><span class="keyword">export</span> CATALINA_HOME=/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo</div><div class="line"><span class="keyword">export</span> CATALINA_TMPDIR=/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo/temp</div><div class="line"><span class="keyword">export</span> JRE_HOME=/usr/java/jdk1.<span class="number">7.0</span>_05</div><div class="line"><span class="keyword">export</span> CLASSPATH=/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo/bin/bootstrap.jar:/home/supertool/lvsijia/apache-tomcat-<span class="number">7</span>-demo/bin/tomcat-juli.jar</div><div class="line"></div><div class="line">bash startup.sh;</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>项目部署工作是一个很无聊，很费时，但又十分重要的工作，记得在飞饭的时候，由于项目并没有采用maven构建，以及项目包含了<br>大量的图片，部署工作很是麻烦，当是只是在测试的时候采用 ｀git hook` 的方式半自动化运维。</p>
<p>实际在运维的时候，稍微麻烦的项目可以采用jenkins，bamboo，puppet，不过由于目前dashboard还算一个很小的项目，<br>就采用了shell＋nexus仓库的方式进行部署。</p>
]]></summary>
    
      <category term="运维" scheme="http://stackbox.org/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于CAS的单点登录学习]]></title>
    <link href="http://stackbox.org/2014/11/SSO-learning/"/>
    <id>http://stackbox.org/2014/11/SSO-learning/</id>
    <published>2014-11-10T08:11:52.000Z</published>
    <updated>2015-04-19T19:21:26.000Z</updated>
    <content type="html"><![CDATA[<p>目前一般使用般用jasgi-CAS来实现SSO</p>
<p>具体协议： <a href="http://jasig.github.io/cas/4.0.0/protocol/CAS-Protocol.html" target="_blank" rel="external">http://jasig.github.io/cas/4.0.0/protocol/CAS-Protocol.html</a></p>
<p>分为基础模式和代理模式，代理模式是cas3新增点内容</p>
<p><img src="/image/cas/cas-web-flow.png" alt=""></p>
<p><img src="/image/cas/proxy-web-flow.jpg" alt=""></p>
]]></content>
    
    
      <category term="工具" scheme="http://stackbox.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[东奔西走找工作]]></title>
    <link href="http://stackbox.org/2014/08/some-interviews/"/>
    <id>http://stackbox.org/2014/08/some-interviews/</id>
    <published>2014-08-14T14:23:03.000Z</published>
    <updated>2015-02-27T16:30:32.000Z</updated>
    <content type="html"><![CDATA[<p>8月中旬来北京之后就开始了找工作历程,过程辛酸，并让我对过去这一年进行反思，总结起来如下：</p>
<ul>
<li>对数据结构，算法，设计模式这些基础的东西缺乏兴趣，认为这些东西不能装X所以就不深入学习了,但不积跬步无以至千里，基础不行是写不出好代码的</li>
<li>好高骛远，一味的追寻新的框架，只看tutorial却不看reference和javadoc，没有去搞明白为什么framework这么实现，为什么api/spi这么设计</li>
<li>整天嘴炮，却疏于实践，github上有很长一段时间没有commit</li>
<li>对项目质量要求不高，一坨烂代码扔那儿只求能过了QA就行，没有持续的重构与性能优化</li>
</ul>
<p>恩，目前已经在秒针工作了，气氛相当棒！</p>
<h2 id="58同城">58同城</h2>
<p>公司在朝阳区的两座小楼里，虽然在帝都寸土寸金的地方看起来不错，不过和旁边的土豪完美世界比起来就小巫见大巫了。<br>第一次面试这等规模的公司，有点不淡定，而且对这次面试没有做什么准备，表现极差</p>
<p>面试职位是广告研发工程师，首先是一个简短的自我介绍，然后标准的流程就会问你为什么离职，简历中有项目的话会问你让你感觉最好的项目是什么，恩，需要注意感觉最好和为什么离职，有时会有一些逻辑上的矛盾，需要注意</p>
<p>然后问了一下spring有哪几方面有点，（基础 不牢很自然的就把DI和IOC搞混了），IOC的主要作用（应该回答业业务上解耦，剥离多余代码，而不是说用XXX注解注入），spring如何实现的，里面用到了些什么设计模式，DI怎么用伪代码来实现（虽然前些日子在写一个jsr330实现，但依赖的处理还是挺麻烦的，一不小心就循环了，所以这道伪代码的题没有写出来）</p>
<p>之后就是一些基础，java中hashmap的内部数据结构，equals和hashcode方法，二叉树中序遍历，前序遍历，mysql索引的数据结构，加索引的原则，InnoDB和myiasm的区别，以及常见的mysql优化方案，jvm原理等等。</p>
<p>正如 <a href="http://kanzhun.com" target="_blank" rel="external">某网站</a> 所说，hashmap,jvm,性能调优是必考题~~哎</p>
<p>总体来讲这次面试表现很差，但面试官脾气很好没被我气疯~~|| 万幸</p>
<h2 id="去哪网">去哪网</h2>
<p>面的是去哪的无线部门，填完信息表后给了一套笔试题做，有一些数理逻辑的题，然后是一些算法数据结构，比如hash算法，线程间通讯，稳定性/非稳定性排序，二叉树遍历，bash脚本对日志的处理（sed，awk忘了怎么用了），数据库设计原则等一些问题。准备一下不算太难。一些实际开发项目中遇到的问题，比如redis memcache的适用场景，就没有答出来，这个还得多了解一下。有几道在纸上现场编程的题，心里面太急了，好像就答错了。手写设计模式代码有一些错误，基础需要再补补。另外问了一下servlet体系结构的问题，注入</p>
<p>面试官应该是一位技术骨干，挺和善的 。整个面试过程中，在飞饭积累的经验对我的帮助极大。由于部门经理不在，估计下周才能等到消息。</p>
<h2 id="兰亭集势">兰亭集势</h2>
<p>第一个来面试给水喝的公司，公司算是外企，很是高冷，面试也是俩人一块面的,压力很大。</p>
<p>详细的问了一下以前做的项目，比如让你画个系统架构图，然后讲一下支付模块的整个流程，关于支付的问题，当时<br>做的时候就迷迷糊糊的，没有答好，之后问了一些常见的库的使用，我说了一个quartz和ehcache，就被问到了这个<br>缓存的使用场景，答得不太好，不过学习还是良多的（ehcache直接将缓存放到了jvm中，显然没有诸如memcache之类的快）,<br>此外还有一些基础问题，比如hashmap的结构，适用场景，servlet与filter的区别，描述下三次握手，struts2是怎么实现请求分发的，复合主键怎么查询的，hashmap是否线程安全（如果是的话哪个方法不安全）,最后一道直接上机编程求一个读文件算词频的问题。没<br>回答好(在文件特大的情况下用hashmap的效率蛮低的,应该换成其他的map,写的代码没有处理空指针异常的情况)。还有，{} 在js里叫对象啊，而不是叫字典，map之类的，别搞混了</p>
<p>ps: 要成为一个好的开发得先成为一个好的运维</p>
<p>总体感觉不满意，等消息中</p>
<h2 id="乐视网">乐视网</h2>
<p>公司看起来很是苦逼,没有前台，去了之后跟hr打电话，然后做了一套题，继续很苦逼的连个作为都没有，题目大都是选择题，很基础，后面两道是一个关于红黑树和b+树的，还有一个是画出单点登录的时序图。有一个以前没注意到知识点，<em><a href="http://blog.csdn.net/yuanyuanmmm/article/details/4922587" target="_blank" rel="external">String s = new String(“abc”)一共创建了几个对象</a></em>,答案应该是两个，对jvm的一些机制不熟，问题答错了。</p>
<p>第一个面试官气场很大，可能以前做的项目比较小，被鄙视了一番，然后说了下以前做的一些东西，比如流程，支付之类的，对自己表现不太满意。然后说了一下schedule，面试官问我<br>是不是分布式的schedule，表示不会。最后说了一下薪资要求，可能要求比较低吧，又被鄙视了一番。</p>
<p>第二位面试官问了一些基础的东西，比如git的优点，maven的一些常用命令，然后问我对java哪方便比较熟悉，这块我没答上来，其实主要指的就是 <strong>容器，io， 网络</strong>。另外问了一下事务，不太熟悉。</p>
<p>最后了解到这个职位是做基于docker的saas开发的，这方面没经验，估计也没机会了。</p>
<h2 id="搜狗">搜狗</h2>
<p>去了之后再茶水间，sogou有专门的阿姨整理咖啡机，泡茶，还有自动售货机。。style非常棒，申请的职位是sogou商业平台的，大概是做广告之类的，面试官过来后问了下项目的一些东西，不经意间发现能说的还是挺多的，比如 maven多module的架构拆分，<br>无线接口，支付模块，socketserver之类的，面试官的问题跨度十分跳跃，涉及mven使用,git使用，倒排索引，运维，linux，shell脚本（让我读取参数。。忘了),几个linux命令比如查看线程的cpu占有率，查看磁盘空间的使用情况，查看线程的资源使用情况，<br>如何不编写代码知道jvm里有几个对象(经小羽同学提醒java已经自带了一套调优工具了<a href="http://benlocke.blog.163.com/blog/static/213843169201211279461359/" target="_blank" rel="external">详见</a>)，写一个<a href="https://code.csdn.net/snippets/455752" target="_blank" rel="external">单例模式,一开始写的有些小问题</a>，<br>hashmap的结构，gc算法等。最后出了一个算法问题，用stack来实现queue，我的思路是O(n)的，效率较低，<br>网上有更好的<a href="http://www.cnblogs.com/wanghui9072229/archive/2011/11/22/2259391.html" target="_blank" rel="external">解决方法</a>。最后问了一下事务相关的东西，比如spring默认的隔离级别分几种</p>
<p>好像招聘上只写招一个，还是要求硕士,估计没戏了</p>
<h2 id="秒针系统">秒针系统</h2>
<p>秒针其实是个人比较向往的企业，简历也是投了两次才给面试机会，总体感觉尚可，面试官十分的友善，一些不会的问题会给你引导，一些问题还是比较有挑战性的，比如动态pv的实现思路（若干种，我说的有socket.io,listener等),一个完整的中间件的设计方法，rest的幂等性(这个始终理解不能啊)，一些报表的实现，另外还了解到一个叫setmesh的东西，很是神奇，总体感觉大概还是有一些希望的。</p>
<p>如果能二面的话，大概要碰一些struts1和前端的一些东西了，假如被录用的话估计要写好多js了。不过有机会碰hadoop也是一个不错的机会</p>
<p>祝我好运！</p>
<p>第二天是部门的产品总监面的，虽然有一定的年龄了，但是真的好萌，保持这种好心态真心太厉害了，最后是和hr面，也没谈多少东西，不过关于为什么辞职的原因，说的还是不够好，比如问为什么离职，hr面的时候对老东家的评价有点狠了，应该点到为止。然后问了一下和帝都的其他互联网公司相比为什么选择秒针，这个在说的时候条理不太清楚。</p>
<p>最后拿到了offer，很欢乐。</p>
<h2 id="蓝光高品">蓝光高品</h2>
<p>网上没有相关的资料，面试的时候才知道公司的产品是一个叫蓝光联盟的东西，算是做线下软件预装和推广的,目前的是pc端，据说要发力<br>移动端，面试的东西还算简单，给了套做了下，主要是sql，正则，设计模式等等，sql相关的问题答得都不太好。</p>
<p>比如联合索引的问题，同时选出表中男生和女生的数量(case by语法)，以及left join where和left join and的区别，恩，数据库方面我还是很欠缺。</p>
<p>已经确认通过,给了一天时间来考虑，不过根据HR的职业素养上看，HR职业水平比秒针的更专业，秒针的hr真的就是一小姑娘。</p>
<h2 id="阿里巴巴">阿里巴巴</h2>
<p>内推网投阿里小微金的,流程很快，然后进行了一次电话面试，不得不说阿里的技术还是很厉害的，不过8点多了还没下班，o(╯□╰)o</p>
<p>问的问题技术含量很高，不像其他公司那样只是问下浅显的原理，而是对每一项技术都会刨根揭底的问思路和在项目中的使用<br>情况，比如为什么要迁移到springmvc，设计模式的使用，单例模式在项目中怎么用的，还有没有了解其他的设计模式，适配器<br>模式的使用场景，然后根据你的项目问你的问题，比如在公司负责什么模块，支付模块的实现，主要遇到了什么问题，支付的一致性<br>问题是怎么解决的，另外项目中对你成长最大的项目是啥（这个58也问过），乐观锁悲观锁，jvm分代内存管理是怎么一回事。然后权限<br>系统的设计的思路，是怎么设计的，当时做了哪些工作，为什么说是核心开发人员等等。数据库方面问了下mysql分库分表，怎么分的，水平分还是垂直分等等。</p>
<p>不过百忙之中抽出那么长时间来面试，还是相当有耐心的。</p>
<p>第二天晚上视频面试，两位面试官看起来已经有一定年纪了，首先是一段蛋疼的自我介绍（这个真没有准备),<br>然后会问了一点东西，比如你以前公司的人数和开发团队架构，以前的开发流程是怎么样的，文档写的怎么样，<br>UML用的怎么样，你觉得你这些项目中做的最好的是哪些，平常都用哪些设计模式之类的，从这一点看出，这等<br>规模的公司，即使是互联网公司，开发时也是尽量按照正常的开发流程走的，不会为了敏捷而放弃其他的东西。</p>
<p>两星期之内给结果，最后阿里还发个短信让我给面试一个评价，好吧，浓浓的淘宝风格。</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[jsonp使用]]></title>
    <link href="http://stackbox.org/2014/06/jsonp-usage/"/>
    <id>http://stackbox.org/2014/06/jsonp-usage/</id>
    <published>2014-06-21T09:16:00.000Z</published>
    <updated>2015-02-27T16:31:13.000Z</updated>
    <content type="html"><![CDATA[<p>首先，需要明确记住的是，jsonp不是ajax的一种特例，而是使用动态script来获取数据的一种方式。</p>
<h2 id="原理">原理</h2>
<p>由于<a href="http://baike.baidu.com/link?url=LEaAmZN5IYfQA1MwEnUm8eIgio8sTU9lRdsvwtJKKHIuGFYxKRtOOXumMICnUHFHLyQk5kLzfyXzTm_ERmJkfK" target="_blank" rel="external">同源策略</a>,一般来说位于 server1.example.com的网页无法与不是 server1.example.com 的服务器沟通， 而 HTML的 <code>&lt;script&gt;</code> 元素是个例外,利用这个策略，可以实现跨域获取数据的功能。</p>
<p>所以，我们只要构建一个<code>&lt;script&gt;</code>元素，然后将 <code>src</code> 属性赋值成我们请求资料的地址即可（参数适用get方式进行拼接），比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> </div><div class="line">	src=<span class="string">"http://server2.example.com/userlist?userId=1823&callback=sayHello"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure>



<p>浏览器请求这个资源，服务器端进行一些特殊的处理,给浏览器返回如下所示的资源。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sayHello({</div><div class="line">	<span class="string">'userId'</span> : <span class="number">1823</span>,</div><div class="line">	<span class="string">'name'</span> : <span class="string">'stackbox'</span></div><div class="line">})</div></pre></td></tr></table></figure>

<p>即全局运行了一个sayHello函数，参数为获取的json数据。</p>
<p>jQuery内置提供的jsonp功能,最简单的使用方式如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.getJSON(url+<span class="string">"&callback=?"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>{</div><div class="line">    alert(<span class="string">"Symbol: "</span> + data.symbol + <span class="string">", Price: "</span> + data.price);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>此时jQuery会生成一个命名随机的callback方法， 比如 <strong>jQuery18308848262811079621_1393981029347</strong>，然后会<br>将这个函数附加到全局window，这样返回资源的时候就能调用这个函数了。</p>
<p>也可以指定自己的callback名，比如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax({</div><div class="line">       url:<span class="string">"http://localhost:20002/MyService.ashx?callback=?"</span>,   </div><div class="line">       dataType:<span class="string">"jsonp"</span>,</div><div class="line">       jsonpCallback:<span class="string">"person"</span>,</div><div class="line">       success:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</div><div class="line">           alert(data.name + <span class="string">" is a a"</span> + data.sex);</div><div class="line">       }</div><div class="line">  });</div></pre></td></tr></table></figure>

<p>除了使用 <a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="external">$.ajax</a>,也可以使用 <a href="http://www.w3schools.com/Jquery/ajax_ajaxsetup.asp" target="_blank" rel="external">$.ajaxSetup</a>对请求进行设置。</p>
<h2 id="示例">示例</h2>
<h2 id="备注">备注</h2>
<p>JSONP是一个非标准的规范，其优点在于浏览器兼容性，而且由于发展<br>的比较早目前有大量基于JSONP的api(Yahoo,Twitter, etc) 和库(jQUery, YUI)<br>它的缺点也很明显：</p>
<ol>
<li>使得rest风格的api不再那么优雅</li>
<li>安全问题</li>
<li>与跨域的接口交互困难，无法post，无法直接给接口传一个json(虽然可以URLEncode成一个参数，但是比较丑陋)</li>
<li>调试复杂，具体参见 <a href="http://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/" target="_blank" rel="external">这篇文章</a></li>
</ol>
<p>而且，解决跨域问题的方式不止有JSONP这一种，还有 <a href="http://zh.wikipedia.org/wiki/%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E4%BA%AB" target="_blank" rel="external">Cross-Origin Resource Sharing (CORS)</a> 和 Proxy两种。</p>
<ul>
<li>CORS的关键在于: XMLHttpRequest 在Level 2时新增了跨域访问的功能，需要在服务器端设置一些特殊header，兼容性你懂得。</li>
<li>Proxy方式就是： 使用apache/Nginx将另外一个site的接口映射到同源的URL下，简单暴力。缺点在于每次新的api都要修改proxy的配置。</li>
</ul>
<h2 id="后记">后记</h2>
<p>资料来源：</p>
<ol>
<li><a href="http://zh.wikipedia.org/wiki/JSONP" target="_blank" rel="external">http://zh.wikipedia.org/wiki/JSONP</a></li>
<li><a href="http://blog.csdn.net/patern_pan/article/details/7588755" target="_blank" rel="external">http://blog.csdn.net/patern_pan/article/details/7588755</a></li>
<li><a href="http://forum.jquery.com/topic/jsonp-and-randomly-generated-callback-function" target="_blank" rel="external">http://forum.jquery.com/topic/jsonp-and-randomly-generated-callback-function</a></li>
<li><a href="http://stackoverflow.com/questions/22186703/modifying-jquery-jsonp-callback-function" target="_blank" rel="external">http://stackoverflow.com/questions/22186703/modifying-jquery-jsonp-callback-function</a></li>
<li><a href="http://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/" target="_blank" rel="external">http://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/</a></li>
</ol>
<p>PS:今天在和GR童鞋谈论校长的 <a href="http://book.douban.com/subject/24335672/" target="_blank" rel="external">《淘宝技术这十年》</a> 时候, 发现这么一个知识点:</p>
<blockquote>
<p>生成首页后，对Web前端稍微有点常识的人都应该知道，浏览器下一步会加载页面中用到的CSS、JS（JavaScript）、图片等样式、脚本和资源文件。但是可能相对较少的人才会知道，你的浏览器在同一个域名下并发加载的资源数量是有限的，例如IE 6和IE 7是两个，IE 8是6个，chrome各版本不大一样，一般是4～6个。我刚刚看了一下，我访问淘宝网首页需要加载126个资源，那么如此小的并发连接数自然会加载很久。</p>
</blockquote>
<p>好了，就到这里了。</p>
]]></content>
    
    
      <category term="前端" scheme="http://stackbox.org/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vagrant虚拟机使用]]></title>
    <link href="http://stackbox.org/2014/03/vagrant-using/"/>
    <id>http://stackbox.org/2014/03/vagrant-using/</id>
    <published>2014-03-28T01:46:55.000Z</published>
    <updated>2015-04-19T19:21:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Vagrant_虚拟机使用">Vagrant 虚拟机使用</h2>
<p>vagrant 是一款用于创建和部署虚拟化开发环境，一般都是用virtualbox做provider的，不过也可以使用其他虚拟机,比如vmware和docker,<br>有国外大牛做出了这个<a href="https://github.com/philspitler/vagrant-docker" target="_blank" rel="external">vagrant-docker</a>项目,就是使用docker作为provider.</p>
<h2 id="安装">安装</h2>
<ul>
<li>安装 <a href="http://download.virtualbox.org/virtualbox/4.3.6/VirtualBox-4.3.6-91406-Win.exe" target="_blank" rel="external">VirtualBox-4.3.6-91406-Win.exe</a> </li>
<li>安装 <a href="http://966b.http.dal05.cdn.softlayer.net/data-production/1835e881651ac8f27a9e4b815754f1934db71fe6?filename=Vagrant_1.4.3.msi" target="_blank" rel="external">Vagrant_1.4.3.msi</a></li>
</ul>
<h2 id="配置">配置</h2>
<ul>
<li><p>从<a href="http://www.vagrantbox.es/" target="_blank" rel="external">www.vagrantbox.es</a>‎下载虚拟机，我们使用32位的ubuntu版本 <a href="http://files.vagrantup.com/lucid32.box" target="_blank" rel="external">lucid32.box</a>(这个是ubuntu10不推荐使用)</p>
</li>
<li><p>将box文件拷贝到计算机的某个文件夹中，msys运行添加虚拟机命令</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant box add lucid32 ./lucid32.box</div></pre></td></tr></table></figure>

<ul>
<li>创建内容如下的 <code>Vagrantfile</code> 文件</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">  <span class="comment"># -*- mode: ruby -*-</span></div><div class="line">  <span class="comment"># vi: set ft=ruby :</span></div><div class="line"></div><div class="line">  <span class="comment"># Vagrantfile API/syntax version. Don't touch unless you know what you're doing!</span></div><div class="line">  <span class="constant">VAGRANTFILE_API_VERSION</span> = <span class="string">"2"</span></div><div class="line"></div><div class="line">  <span class="constant">Vagrant</span>.configure(<span class="constant">VAGRANTFILE_API_VERSION</span>) <span class="keyword">do</span> |config|</div><div class="line">  <span class="comment"># All Vagrant configuration is done here. The most common configuration</span></div><div class="line">  <span class="comment"># options are documented and commented below. For a complete reference,</span></div><div class="line">  <span class="comment"># please see the online documentation at vagrantup.com.</span></div><div class="line"></div><div class="line">  <span class="comment"># Every Vagrant virtual environment requires a box to build off of.</span></div><div class="line">  config.vm.box = <span class="string">"lucid32"</span></div><div class="line"></div><div class="line">  <span class="comment"># The url from where the 'config.vm.box' box will be fetched if it</span></div><div class="line">  <span class="comment"># doesn't already exist on the user's system.</span></div><div class="line">  config.vm.box_url = <span class="string">"http://files.vagrantup.com/lucid32.box"</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></div><div class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></div><div class="line">  <span class="comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span></div><div class="line">  <span class="comment"># config.vm.network :forwarded_port, guest: 80, host: 8080</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></div><div class="line">  <span class="comment"># using a specific IP.</span></div><div class="line">  <span class="comment"># config.vm.network :private_network, ip: "192.168.33.10"</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></div><div class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></div><div class="line">  <span class="comment"># your network.</span></div><div class="line">  <span class="comment"># config.vm.network :public_network</span></div><div class="line"></div><div class="line">  <span class="comment"># If true, then any SSH connections made will enable agent forwarding.</span></div><div class="line">  <span class="comment"># Default value: false</span></div><div class="line">  <span class="comment"># config.ssh.forward_agent = true</span></div><div class="line"></div><div class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></div><div class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></div><div class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></div><div class="line">  <span class="comment"># argument is a set of non-required options.</span></div><div class="line">  <span class="comment"># config.vm.synced_folder "../data", "/vagrant_data"</span></div><div class="line"></div><div class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></div><div class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></div><div class="line">  <span class="comment"># Example for VirtualBox:</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># config.vm.provider :virtualbox do |vb|</span></div><div class="line">  <span class="comment">#   # Don't boot with headless mode</span></div><div class="line">  <span class="comment">#   vb.gui = true</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment">#   # Use VBoxManage to customize the VM. For example to change memory:</span></div><div class="line">  <span class="comment">#   vb.customize ["modifyvm", :id, "--memory", "1024"]</span></div><div class="line">  <span class="comment"># end</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># View the documentation for the provider you're using for more</span></div><div class="line">  <span class="comment"># information on available options.</span></div><div class="line"></div><div class="line">  <span class="comment"># Enable provisioning with Puppet stand alone.  Puppet manifests</span></div><div class="line">  <span class="comment"># are contained in a directory path relative to this Vagrantfile.</span></div><div class="line">  <span class="comment"># You will need to create the manifests directory and a manifest in</span></div><div class="line">  <span class="comment"># the file base.pp in the manifests_path directory.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># An example Puppet manifest to provision the message of the day:</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># # group { "puppet":</span></div><div class="line">  <span class="comment"># #   ensure =&gt; "present",</span></div><div class="line">  <span class="comment"># # }</span></div><div class="line">  <span class="comment"># #</span></div><div class="line">  <span class="comment"># # File { owner =&gt; 0, group =&gt; 0, mode =&gt; 0644 }</span></div><div class="line">  <span class="comment"># #</span></div><div class="line">  <span class="comment"># # file { '/etc/motd':</span></div><div class="line">  <span class="comment"># #   content =&gt; "Welcome to your Vagrant-built virtual machine!</span></div><div class="line">  <span class="comment"># #               Managed by Puppet.\n"</span></div><div class="line">  <span class="comment"># # }</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># config.vm.provision :puppet do |puppet|</span></div><div class="line">  <span class="comment">#   puppet.manifests_path = "manifests"</span></div><div class="line">  <span class="comment">#   puppet.manifest_file  = "init.pp"</span></div><div class="line">  <span class="comment"># end</span></div><div class="line"></div><div class="line">  <span class="comment"># Enable provisioning with chef solo, specifying a cookbooks path, roles</span></div><div class="line">  <span class="comment"># path, and data_bags path (all relative to this Vagrantfile), and adding</span></div><div class="line">  <span class="comment"># some recipes and/or roles.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># config.vm.provision :chef_solo do |chef|</span></div><div class="line">  <span class="comment">#   chef.cookbooks_path = "../my-recipes/cookbooks"</span></div><div class="line">  <span class="comment">#   chef.roles_path = "../my-recipes/roles"</span></div><div class="line">  <span class="comment">#   chef.data_bags_path = "../my-recipes/data_bags"</span></div><div class="line">  <span class="comment">#   chef.add_recipe "mysql"</span></div><div class="line">  <span class="comment">#   chef.add_role "web"</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment">#   # You may also specify custom JSON attributes:</span></div><div class="line">  <span class="comment">#   chef.json = { :mysql_password =&gt; "foo" }</span></div><div class="line">  <span class="comment"># end</span></div><div class="line"></div><div class="line">  <span class="variable">$script</span> = %<span class="constant">Q</span>{</div><div class="line">    sudo apt-get update</div><div class="line">    sudo apt-get install nasm make build-essential grub qemu zip -y</div><div class="line">  }</div><div class="line"></div><div class="line">  </div><div class="line">  config.vm.provision <span class="symbol">:shell</span>, <span class="symbol">:inline</span> =&gt; <span class="variable">$script</span></div><div class="line">  </div><div class="line"></div><div class="line">  <span class="comment"># Enable provisioning with chef server, specifying the chef server URL,</span></div><div class="line">  <span class="comment"># and the path to the validation key (relative to this Vagrantfile).</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># The Opscode Platform uses HTTPS. Substitute your organization for</span></div><div class="line">  <span class="comment"># ORGNAME in the URL and validation key.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># If you have your own Chef Server, use the appropriate URL, which may be</span></div><div class="line">  <span class="comment"># HTTP instead of HTTPS depending on your configuration. Also change the</span></div><div class="line">  <span class="comment"># validation key to validation.pem.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># config.vm.provision :chef_client do |chef|</span></div><div class="line">  <span class="comment">#   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"</span></div><div class="line">  <span class="comment">#   chef.validation_key_path = "ORGNAME-validator.pem"</span></div><div class="line">  <span class="comment"># end</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># If you're using the Opscode platform, your validator client is</span></div><div class="line">  <span class="comment"># ORGNAME-validator, replacing ORGNAME with your organization name.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># If you have your own Chef Server, the default validation client name is</span></div><div class="line">  <span class="comment"># chef-validator, unless you changed the configuration.</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment">#   chef.validation_client_name = "ORGNAME-validator"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<ul>
<li>进入Vagrantfile的同名目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看帮助</span></div><div class="line">$ vagrant --help</div><div class="line"></div><div class="line"><span class="comment">#启动虚拟机</span></div><div class="line">$ vagrant up</div><div class="line"></div><div class="line"><span class="comment">#关闭虚拟机</span></div><div class="line">$ vagrant halt</div><div class="line"></div><div class="line"><span class="comment">#ssh连接</span></div><div class="line">$ vagrant ssh</div><div class="line"></div><div class="line"><span class="comment">#显示add的所有box</span></div><div class="line">$ vagrant box list</div><div class="line"></div><div class="line"><span class="comment">#remove box,第一个参数是box的名称，第二个是provider的名称</span></div><div class="line">$ vagrant box remove precise64 virtualbox</div><div class="line"></div><div class="line"><span class="comment">#摧毁一个vm，(在VagrantFile相同文件夹下)，注意与 vagrant box remove的不同</span></div><div class="line">$ vagrant destroy</div><div class="line"></div><div class="line"><span class="comment">#也可以通过ssh-client连接，用户名密码都为vagrant,端口为2222</span></div><div class="line">$ ssh -p <span class="number">2222</span> vagrant@localhost</div></pre></td></tr></table></figure>

<h2 id="导出Box">导出Box</h2>
<ul>
<li>步骤<ol>
<li>cd into the directory with your <strong>Vagrantile</strong></li>
<li>run <code>vagrant package</code>· This will export a box file called package.box by default</li>
<li>run <code>vagrant box add foo package.box</code> virtualbox to add package.box to your existing boxes. (Assuming you are using virtualbox and not VMWare)</li>
<li>run <code>vagrant box list</code> to verify it was added.</li>
</ol>
</li>
</ul>
<p> Now you can just create a new folder, run vagrant init as normal and set your box to the following:<code>config.vm.box = &quot;foo&quot;</code>,The new VM will spin up with the exact data that was present in the previous VM.</p>
<h2 id="时间同步">时间同步</h2>
<p>把<code>virtualbox/bin</code>加入环境变量，运行一下命令，设置时间同步（win下也可）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#List vms</span></div><div class="line">$ VBoxManage list vms</div><div class="line"> </div><div class="line"><span class="comment">#get status of time sync</span></div><div class="line">$ VBoxManage getextradata &lt;vm-name&gt; VBoxInternal/Devices/VMMDev/<span class="number">0</span>/Config/GetHostTimeDisabled </div><div class="line"> </div><div class="line"><span class="comment">#NOTE: Make sure to restart the VM after changing these settings.</span></div><div class="line"> </div><div class="line"><span class="comment">#disable time sync</span></div><div class="line">$ VBoxManage setextradata &lt;vm-name&gt; VBoxInternal/Devices/VMMDev/<span class="number">0</span>/Config/GetHostTimeDisabled <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment">#enable time sync</span></div><div class="line">$ VBoxManage setextradata &lt;vm-name&gt; VBoxInternal/Devices/VMMDev/<span class="number">0</span>/Config/GetHostTimeDisabled <span class="number">0</span></div></pre></td></tr></table></figure>

<h2 id="使用">使用</h2>
<ul>
<li>网络配置<ol>
<li>较为常用是端口映射，就是将虚拟机中的端口映射到宿主机对应的端口直接使用 ，在Vagrantfile中配置：<code>config.vm.network :forwarded_port, guest: 80, host: 8080</code>,guest: 80 表示虚拟机中的80端口， host: 8080 表示映射到宿主机的8080端口</li>
<li>如果需要自己自由的访问虚拟机，但是别人不需要访问虚拟机， ，在Vagrantfile中配置：<code>config.vm.network :private_network, ip: &quot;192.168.1.104&quot;</code>,192.168.1.104表示虚拟机的IP，多台虚拟机的话需要互相访问的话，设置在相同网段即可</li>
<li>如果需要将虚拟机作为当前局域网中的一台计算机，由局域网进行DHCP，那么在Vagrantfile中配置：<code>config.vm.network :public_network</code></li>
</ol>
</li>
</ul>
<ul>
<li><p>目录映射</p>
<p>虚拟机初始化启动时， host的当前工作目录就会映射到 guest的 <code>/vagrant</code> 文件夹下</p>
<p>也可以通过VagrantFile <code>config.vm.synced_folder &quot;wwwroot/&quot;, &quot;/var/www&quot;</code> 完成映射配置</p>
</li>
</ul>
]]></content>
    
    
      <category term="工具" scheme="http://stackbox.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
